import duckdb
from datetime import date
from dateutil.relativedelta import relativedelta as delta

# Returns a list of 6 months previous to argument month with format YYYY-MM
# ['2022-04', '2022-03' ...] 
def prevSixMonths(month):
    y = int(month.split("-")[0])
    m = int(month.split("-")[1])
    time = date(y, m, 1)

    res = []

    for i in range(1,7):
        res.append(str(time + delta(months=-i))[:-3])

    return res


def join():
    # Connect to trusted database
    conTrus = duckdb.connect(database="dataManagementBackbone/data/trusted/crimesPrices.db")

    tables = conTrus.execute("SHOW TABLES").df()

    if len(tables['name']) != 0:

        # Import tables to dataframes
        crimesDF = conTrus.execute("SELECT * FROM crimes").df()
        pricesEcoDF = conTrus.execute("SELECT e.Month, District, AveragePrice, AveragePriceDetached, " + 
                              "AveragePriceSemiDetached, AveragePriceTerraced, AveragePriceFlatOrMaisonette, " +
                              '"Economically inactive", Employed, Unemployed ' +  
                              "FROM prices p, economicStatus e WHERE p.Month = e.Month AND p.GeoName = e.District").df()

        # Group all theft related crimes into one modality
        crimesDF.loc[crimesDF['Crime type'].str.lower().str.contains('theft'), 'Crime type'] = "Theft"

        # Reaname 'LSOA name' column to 'District' for joining tables
        crimesDF = crimesDF.rename(columns={'LSOA name' : 'District'})

        # Group crimes by district, type of crime and month
        group = crimesDF.groupby(['District', 'Crime type', 'Month'])

        # Calculate the count of each group and mean latitude and longitude
        counts = group.size().to_frame(name='Count')
        group = (counts
        .join(group.agg({'Longitude': 'mean'}))
        .join(group.agg({'Latitude':  'mean'}))
        .reset_index()
        )
        # Select columns from prices to be in final table
        finalDF = pricesEcoDF

        # Perform the join of the two tables
        # Create a count column for each type of crime committed in the past 6 months to the price month
        # So for each month and each district we have count column of each type of crime.
        # The count corresponds to how many crimes were committed of that type in that district the 6 months 
        # (these months correspond to the crimes table) prior to the month column (month corresponds to the prices tables)
        # Also add the mean latitude and longitude for each type of crime and district in the prior 6 months to the month column
        for month in finalDF['Month'].unique():
            for district in finalDF['District'].unique():
                for crime in crimesDF['Crime type'].unique():
                    count = group[(group['District'] == district) &
                                (group['Crime type'] == crime) &
                                (group['Month'].isin(prevSixMonths(month)))][['Count', 'Longitude', 'Latitude']]
                    
                    finalDF.loc[(finalDF['Month'] == month) & (finalDF['District'] == district), crime + ' Count'] = sum(count['Count'])
                    finalDF.loc[(finalDF['Month'] == month) & (finalDF['District'] == district), crime + ' Lon'] = count['Longitude'].mean()
                    finalDF.loc[(finalDF['Month'] == month) & (finalDF['District'] == district), crime + ' Lat'] = count['Latitude'].mean()


        conExp = duckdb.connect("dataManagementBackbone/data/exploitation/crimesPrices.db")
        tables = conExp.execute("SHOW TABLES").df()
        if(len(tables) == 0):
            conExp.execute("CREATE TABLE crimesPrices AS SELECT * FROM finalDF")
        else:
            conExp.execute("INSERT INTO crimesPrices SELECT * from finalDF")

        conExp.close()

    conTrus.close()